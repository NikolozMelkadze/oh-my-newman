{
	"variables": [],
	"info": {
		"name": "drug",
		"_postman_id": "213f9410-cec8-3c3d-cc8e-bd98c189fdb6",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "001_user",
			"description": "",
			"item": [
				{
					"name": "/drug/user/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\n};\nconst assertNotEqual = (name, actual, expected) => {\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\n};\nconst assertType = (name, value, type) => {\n  if (type === 'array') {\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\n  } else {\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\n  }\n};\nconst assertTimeout = (name, actual, timeout) => {\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\n};\nconst assertFail = msg => tests[msg] = false;\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\n\n// 通用部分\nprintInfo('Request params', JSON.stringify(request.data));\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\nassertEqual('status code', responseCode.code, 200);\n\nlet json;\ntry {\n  json = JSON.parse(responseBody);\n} catch (err) {\n  assertFail('Expect response body to be valid JSON');\n  printInfo('Response body', responseBody);\n  console.error(err);\n}\n\n// 项目通用的断言\nif (json) {\n  const { resultCode, resultMsg, detailMsg } = json;\n  assertEqual('resultCode', resultCode, 1);\n\n  if (resultMsg) printInfo('msg', resultMsg);\n  if (detailMsg) printInfo('msg', detailMsg);\n}\n\n// 具体接口相关的断言\nconst expected = {\n  mobile: request.data.telephone,\n  userType: Number(request.data.userType),\n};\n\nif (json && json.data) {\n  const { user } = json.data;\n  assertType('user', user, 'object');\n  \n  const { telephone, userType } = user;\n  assertEqual('mobile', telephone, expected.mobile);\n  assertEqual('userType', userType, expected.userType);\n  \n  setEnvVar('drugAccessToken', json.data.access_token);\n} else {\n  assertFail('Expect response body to have data');\n}\n"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/user/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "telephone",
									"value": "{{DRUG_MOBILE}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "password",
									"value": "{{PWD_LOGIN}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "userType",
									"value": "11",
									"type": "text",
									"enabled": true
								},
								{
									"key": "loginGroupId",
									"value": "",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/user/login/auto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\n};\nconst assertNotEqual = (name, actual, expected) => {\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\n};\nconst assertType = (name, value, type) => {\n  if (type === 'array') {\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\n  } else {\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\n  }\n};\nconst assertTimeout = (name, actual, timeout) => {\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\n};\nconst assertFail = msg => tests[msg] = false;\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\n\n// 通用部分\nprintInfo('Request params', JSON.stringify(request.data));\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\nassertEqual('status code', responseCode.code, 200);\n\nlet json;\ntry {\n  json = JSON.parse(responseBody);\n} catch (err) {\n  assertFail('Expect response body to be valid JSON');\n  printInfo('Response body', responseBody);\n  console.error(err);\n}\n\n// 项目通用的断言\nif (json) {\n  const { resultCode, resultMsg, detailMsg } = json;\n  assertEqual('resultCode', resultCode, 1);\n\n  if (resultMsg) printInfo('msg', resultMsg);\n  if (detailMsg) printInfo('msg', detailMsg);\n}\n\n// 具体接口相关的断言\nconst expected = {\n};\n\nif (json && json.data) {\n  const { user } = json.data;\n  assertType('user', user, 'object');\n    \n  const { telephone, userId, userType } = user;\n  assertType('mobile', telephone, 'string');\n  assertType('userId', userId, 'number');\n  assertType('userType', userType, 'number');\n} else {\n  assertFail('Expect response body to have data');\n}\n"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/user/login/auto",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "telephone",
									"value": "{{DRUG_MOBILE}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "password",
									"value": "{{PWD_LOGIN}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "userType",
									"value": "11",
									"type": "text",
									"enabled": true
								},
								{
									"key": "access_token",
									"value": "{{drugAccessToken}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "serial",
									"value": "{{SERIAL}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/user/update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\n};\nconst assertNotEqual = (name, actual, expected) => {\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\n};\nconst assertType = (name, value, type) => {\n  if (type === 'array') {\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\n  } else {\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\n  }\n};\nconst assertTimeout = (name, actual, timeout) => {\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\n};\nconst assertFail = msg => tests[msg] = false;\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\n\n// 通用部分\nprintInfo('Request params', JSON.stringify(request.data));\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\nassertEqual('status code', responseCode.code, 200);\n\nlet json;\ntry {\n  json = JSON.parse(responseBody);\n} catch (err) {\n  assertFail('Expect response body to be valid JSON');\n  printInfo('Response body', responseBody);\n  console.error(err);\n}\n\n// 项目通用的断言\nif (json) {\n  const { resultCode, resultMsg, detailMsg } = json;\n  assertEqual('resultCode', resultCode, 1);\n\n  if (resultMsg) printInfo('msg', resultMsg);\n  if (detailMsg) printInfo('msg', detailMsg);\n}\n\n// 具体接口相关的断言\nconst expected = {\n};\n\nif (json && json.data) {\n  const { telephone, userId, userType } = json.data;\n  assertType('mobile', telephone, 'string');\n  assertType('userId', userId, 'number');\n  assertType('userType', userType, 'number');\n} else {\n  assertFail('Expect response body to have data');\n}\n"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/user/update",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "{{drugAccessToken}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "headPicFileName",
									"value": "http://default.dev.file.dachentech.com.cn/user/default.jpg",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/user/isRegister",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, timeout) => {\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// 通用部分\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// 项目通用的断言\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo('msg', resultMsg);\r\n  if (detailMsg) printInfo('msg', detailMsg);\r\n}\r\n\r\n// 具体接口相关的断言\r\nconst expected = {\r\n};\r\n\r\nif (json && json.data) {\r\n  const { result, userId, headPicFileName, } = json.data;\r\n  assertType('result', result, 'string');\r\n  assertType('userId', userId, 'number');\r\n  assertType('headPicFileName', headPicFileName, 'string');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/user/isRegister",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "telephone",
									"value": "{{PATIENT_MOBILE}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "userType",
									"value": "1",
									"type": "text",
									"enabled": true
								},
								{
									"key": "access_token",
									"value": "{{drugAccessToken}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "这接口是针对患者的"
					},
					"response": []
				}
			]
		},
		{
			"name": "003_goods",
			"description": "",
			"item": [
				{
					"name": "/drug/goods/salesLog/scanDrugCode 扫描药监码",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, timeout) => {\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// 通用部分\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// 项目通用的断言\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo('msg', resultMsg);\r\n  if (detailMsg) printInfo('msg', detailMsg);\r\n}\r\n\r\n// 具体接口相关的断言\r\nconst expected = {\r\n};\r\n\r\nif (json && json.data) {\r\n  const { packUnit, id, generalName, manufacturer } = json.data;\r\n  assertType('packUnit', packUnit, 'string');\r\n  assertType('id', id, 'string');\r\n  assertType('generalName', generalName, 'string');\r\n  assertType('manufacturer', manufacturer, 'string');\r\n  \r\n  setEnvVar('goodsId', id);\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": "const randInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n// 固定7位药监码 + 13位随便写\r\nconst drugCode = environment.DRUGCODE_PREFIX + randInt(1000000000000, 9999999999999);\r\npostman.setEnvironmentVariable('drugCode', drugCode);\r\n"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/goods/salesLog/scanDrugCode",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "{{DRUG_ACCESS_TOKEN}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "drugCode",
									"value": "{{drugCode}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/goods/salesLog/finishSale 患者买药",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, timeout) => {\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// 通用部分\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// 项目通用的断言\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  // 第1次返回成功，再发送请求提示药已经售出\r\n  assertType('resultCode', resultCode, 'number');\r\n\r\n  if (resultMsg) printInfo('msg', resultMsg);\r\n  if (detailMsg) printInfo('msg', detailMsg);\r\n}\r\n"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/goods/salesLog/finishSale",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "{{DRUG_ACCESS_TOKEN}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "userId",
									"value": "{{PATIENT_USERID}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "patientId",
									"value": "{{PATIENT_ID}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "buyDrugItemJson",
									"value": "[{\"comment\":1,\"drugCode\":\"{{drugCode}}\",\"quantity\":10,\"goodsId\":\"{{goodsId}}\"}]",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/goods/points/getUserGoodsPointsList 获取用户的品种组积分列表",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, timeout) => {\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// 通用部分\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// 项目通用的断言\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo('msg', resultMsg);\r\n  if (detailMsg) printInfo('msg', detailMsg);\r\n}\r\n\r\n// 具体接口相关的断言\r\nconst expected = {\r\n};\r\n\r\nif (json && json.data) {\r\n   const { pointsCount, userGoodsPointsList } = json.data;\r\n   assertType('pointsCount', pointsCount, 'number');\r\n   assertType('userGoodsPointsList', userGoodsPointsList, 'array');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/goods/points/getUserGoodsPointsList",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "{{PATIENT_ACCESS_TOKEN}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "userId",
									"value": "{{PATIENT_USERID}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/goods/points/getUserReceivePointsDetailList 查询患者的获取到积分明细",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, timeout) => {\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// 通用部分\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// 项目通用的断言\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo('msg', resultMsg);\r\n  if (detailMsg) printInfo('msg', detailMsg);\r\n}\r\n\r\n// 具体接口相关的断言\r\nconst expected = {\r\n};\r\n\r\nif (json && json.data) {\r\n  const { pageCount, pageData, total } = json.data;\r\n  assertType('pageCount', pageCount, 'number');\r\n  assertType('pageData', pageData, 'array');\r\n  assertType('total', total, 'number');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/goods/points/getUserReceivePointsDetailList",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "{{PATIENT_ACCESS_TOKEN}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "_002_drugCompanyEmployee",
			"description": "",
			"item": [
				{
					"name": "/drug/drugCompanyEmployee/saveManager - 保存需要添加的管理员",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, time) => {\r\n  const timeout = time || 10000;\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// Common\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// Project specific\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo(resultMsg);\r\n  if (detailMsg) printInfo(detailMsg);\r\n}\r\n\r\n// API specific\r\nconst expected = {\r\n  // foo: environment.FOO,\r\n  // bar: 1,\r\n};\r\n\r\nif (json && json.data) {\r\n  // assertType('data', data, 'object');\r\n\r\n  // const { foobar, foo, bar, } = json.data;\r\n  // assertType('foobar', foobar, 'array');\r\n  // assertEqual('foo', foo, expected.foo);\r\n  // assertNotEqual('bar', bar, expected.bar);\r\n\r\n  // setEnvVar('name', 'string value');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/drugCompanyEmployee/saveManager",
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "name",
									"value": "管理猿{{$randomInt}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "phone",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "drugCompanyId",
									"value": "",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/drugCompanyEmployee/saveEmployee - 保存需要添加和修改的职员",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, time) => {\r\n  const timeout = time || 10000;\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// Common\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// Project specific\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo(resultMsg);\r\n  if (detailMsg) printInfo(detailMsg);\r\n}\r\n\r\n// API specific\r\nconst expected = {\r\n  // foo: environment.FOO,\r\n  // bar: 1,\r\n};\r\n\r\nif (json && json.data) {\r\n  // assertType('data', data, 'object');\r\n\r\n  // const { foobar, foo, bar, } = json.data;\r\n  // assertType('foobar', foobar, 'array');\r\n  // assertEqual('foo', foo, expected.foo);\r\n  // assertNotEqual('bar', bar, expected.bar);\r\n\r\n  // setEnvVar('name', 'string value');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/drugCompanyEmployee/saveEmployee",
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "id",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "name",
									"value": "职员{{$randomInt}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "phone",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "comment",
									"value": "id添加时没有，更新时有；status添加时没，更新时1=在职，2=离职",
									"type": "text",
									"enabled": true
								},
								{
									"key": "drugCompanyId",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "status",
									"value": "",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/drug/drugCompanyEmployee/saveSuperManager 连锁药店更换店长中保存店长操作",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, time) => {\r\n  const timeout = time || 10000;\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// Common\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// Project specific\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo(resultMsg);\r\n  if (detailMsg) printInfo(detailMsg);\r\n}\r\n\r\n// API specific\r\nconst expected = {\r\n  // foo: environment.FOO,\r\n  // bar: 1,\r\n};\r\n\r\nif (json && json.data) {\r\n  // assertType('data', data, 'object');\r\n\r\n  // const { foobar, foo, bar, } = json.data;\r\n  // assertType('foobar', foobar, 'array');\r\n  // assertEqual('foo', foo, expected.foo);\r\n  // assertNotEqual('bar', bar, expected.bar);\r\n\r\n  // setEnvVar('name', 'string value');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
							}
						}
					],
					"request": {
						"url": "{{APP_SERVER}}/drug/drugCompanyEmployee/saveSuperManager",
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "access_token",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "name",
									"value": "店长{{$randomInt}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "phone",
									"value": "",
									"type": "text",
									"enabled": true
								},
								{
									"key": "drugCompanyId",
									"value": "",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}