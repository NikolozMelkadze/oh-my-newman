{
	"variables": [],
	"info": {
		"name": "TEMPLATE",
		"_postman_id": "ff289d98-6979-322d-a0ea-1191b3ebb84a",
		"description": "Write your description here.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "/your/API/address [description]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": "const assertEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} to equal ${expected}, actual: ${actual}`] = actual === expected;\r\n};\r\nconst assertNotEqual = (name, actual, expected) => {\r\n  tests[`Expect ${name} not to equal ${expected}, actual: ${actual}`] = actual !== expected;\r\n};\r\nconst assertType = (name, value, type) => {\r\n  if (type === 'array') {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = Array.isArray(value);\r\n  } else {\r\n    tests[`Expect ${name} to be ${type}: ${value}`] = typeof value === type;\r\n  }\r\n};\r\nconst assertTimeout = (name, actual, time) => {\r\n  const timeout = time || 10000;\r\n  tests[`Expect ${name} to be no more than ${timeout} ms, actual: ${actual} ms`] = actual <= timeout;\r\n};\r\nconst assertFail = msg => tests[msg] = false;\r\nconst printInfo = (msg, value) => tests[`[INFO] ${msg}: ${value}`] = true;\r\nconst setEnvVar = (name, value) => postman.setEnvironmentVariable(name, value);\r\n\r\n// Common\r\nprintInfo('Request params', JSON.stringify(request.data));\r\nassertTimeout('response time', responseTime, environment.RESPONSE_TIMEOUT);\r\nassertEqual('status code', responseCode.code, 200);\r\n\r\nlet json;\r\ntry {\r\n  json = JSON.parse(responseBody);\r\n} catch (err) {\r\n  assertFail('Expect response body to be valid JSON');\r\n  printInfo('Response body', responseBody);\r\n  console.error(err);\r\n}\r\n\r\n// Project specific\r\nif (json) {\r\n  const { resultCode, resultMsg, detailMsg } = json;\r\n  assertEqual('resultCode', resultCode, 1);\r\n\r\n  if (resultMsg) printInfo(resultMsg);\r\n  if (detailMsg) printInfo(detailMsg);\r\n}\r\n\r\n// API specific\r\nconst expected = {\r\n  // foo: environment.FOO,\r\n  // bar: 1,\r\n};\r\n\r\nif (json && json.data) {\r\n  // assertType('data', data, 'object');\r\n\r\n  // const { foobar, foo, bar, } = json.data;\r\n  // assertType('foobar', foobar, 'array');\r\n  // assertEqual('foo', foo, expected.foo);\r\n  // assertNotEqual('bar', bar, expected.bar);\r\n\r\n  // setEnvVar('name', 'string value');\r\n} else {\r\n  assertFail('Expect response body to have data');\r\n}"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": "const randInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nconst randomMobile = `18${randInt(100000000, 999999999)}`;\r\npostman.setEnvironmentVariable('randomMobile', randomMobile);"
					}
				}
			],
			"request": {
				"url": "{{HOST}}/your/api",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mobile\": \"{{randomMobile}}\",\n    \"password\": \"{{PWD_LOGIN}}\"\n}"
				},
				"description": "Write your description here."
			},
			"response": []
		}
	]
}